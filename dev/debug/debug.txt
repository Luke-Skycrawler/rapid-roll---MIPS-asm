.text 0x0
start:
addi $a2,$zero,0
addi $a3,$zero,1
addi $sp,$zero,0x1000
addi $s7,$zero,0x2fff
nor $s7,$s7,$zero           //s7 = 0xffffd000
addi $s6,$zero,12
sll $s6, $s6,16             //s6 = 0x000c0000
addi $s4,$s6,0x3500     //s4= c3500 (800000)
//addi $$t0,$$t0,0x0741       //background black, text white
addi $s5,$zero,4800
sll $s5,$s5,2
jal up_spike
addi $a0,$zero,980
jal broad
addi $a0,$a0,1560
jal broad
addi $a0,$a0,3280
jal broad
addi $a0,$a0,-300
jal heart
addi $a0,$a0,-20
jal ball
//j cursor
j afterlife
end:
j end
up_spike:                    //stack pointer not used, static not stored
    addi $s0,$zero,0
    addi $s1,$zero,268
    addi $t1,$zero,0x0720
    loop_0:
        add $t0,$s0,$s6
        sw $t1,0($t0)
        addi $s0,$s0,4
    bne $s0,$s1,loop_0
    addi $s1,$s1,16
    addi $t2,$sp,0
    loop_n:
        lw $t1,0($t2)
        addi $t2,$t2,4
        add $t0,$s0,$s6
        sw $t1,0($t0)
        addi $s0,$s0,4
    bne $s0,$s1,loop_n
    addi $s1,$s1,-60
    addi $s0,$s1,-20
    loop_score:
        lw $t1,0($t2)
        addi $t2,$t2,4
        add $t0,$s0,$s6
        sw $t1,0($t0)
        addi $s0,$s0,4
    bne $s0,$s1,loop_score
    move $t9,$ra
    jal print_life
    move $ra,$t9
    addi $s0,$zero,320
    addi $s1,$zero,640
    addi $t1,$zero,0x7056
    loop_1:
        add $t0,$s0,$s6
        sw $t1,0($t0)
        addi $s0,$s0,4
    bne $s0,$s1,loop_1
    addi $s0,$zero,640
    addi $t1,$zero,0x7020
    loop_2:
        add $t0,$s0,$s6		
        sw $t1,0($t0)			
        addi $s0,$s0,4
    bne $s0,$s5,loop_2	//$$s5 page text count
jr $ra
broad:
    move $t2,$a0
    addi $t3,$t2,32
    addi $t1,$zero,0x1720
    loop_broad:
        add $t0,$t2,$s6
        sw $t1,0($t0)
        addi $t2,$t2,4
    bne $t2,$t3,loop_broad
jr $ra
spike:
    move $t2,$a0
    addi $t3,$t2,32
    addi $t1,$zero,0x701E
    loop_spike:
        add $t0,$t2,$s6
        sw $t1,0($t0)
        addi $t2,$t2,4
    bne $t2,$t3,loop_spike
jr $ra
heart:
    add $t0,$a0,$s6
    addi $t1,$zero,0x7503
    sw $t1,0($t0)    
jr $ra
ball:
    add $t0,$a0,$s6
    addi $t1,$zero,0x744F
    sw $t1,0($t0)
jr $ra

cursor:                     //print the cursor, two arguments x and y, and dispose the last cursor
    move $s0,$a0         //s0 cursor pos
    addi $t6,$zero,0xe0		// pressed code
    addi $t7,$zero,0xf0     // ps2 break code
	addi $t0,$zero,0xc
	sll $s3,$t0,28
    move $t8,$zero
erase:
    addi $t1,$zero,0x7020
    add $t0,$s6,$a0
    sw $t1,0($t0)
jr $ra
//end of cursor

refresh:
    addi $a1,$a1,1
    move $a0,$a1
    andi $t0,$a1,0x3f
    slti $t0,$t0,0x3f
    bne $t0,$zero,_speed_up
        addi $t1,$zero,1
        sll $t1,$t1,16
        sub $s4,$s4,$t1
    _speed_up:
    move $a0,$s0
    jal erase
    add $t0,$s0,$s6
    lw $t1,320($t0)
	andi $t1,$t1,0xffff
    addi $t9,$zero,0x7020
    addi $t3,$zero,0x701E
    beq $t3,$t1,death_point2
    addi $t3,$zero,0x7503
    bne $t3,$t1,_add_life
    slti $t3,$a2,7
    beq $t3,$zero,stady
        addi $a2,$a2,1
        jal print_life
        j stady
    _add_life:
    bne $t9,$t1,go_up
    lw $t1,640($t0)
    andi $t1,$t1,0xffff
    //beq $t8,$t1,death_point2
    bne $t9,$t1,stady
    j go_down
    stady:
        addi $a0,$s0,320
        jal ball
        j scroll_down
    go_up:
        jal ball
        addi $t9,$zero,960
        slt $v0,$s0,$t9
        bne $v0,$zero,death_point2
        addi $s0,$s0,-320
	j scroll_down
    go_down:
        addi $a0,$s0,640
        jal ball
        addi $t9,$s5,-320
        slt $v0,$a0,$t9
        addi $s0,$s0,320
        beq $v0,$zero,death_point1
        j scroll_down
    death_point1:
        addi $s0,$s0,320
    death_point2:
        jal death
scroll_down:
	addi $t0,$zero,960
	loop_sd1:
		add $t1,$t0,$s6
		lw $t9,0($t1)
		sw $t9,-320($t1)
		addi $t0,$t0,4
	bne $t0,$s5,loop_sd1
end_scroll:
	addi $t0,$t0,-320
	addi $t1,$zero,0x7020
	loop_sd2:
		add $t9,$t0,$s6
		sw $t1,0($t9)
		addi $t0,$t0,4
	bne $t0,$s5,loop_sd2
	move $t8,$zero
	jal gen


gen:
    sw $ra,0($sp)
    addi $sp,$sp,-4
    addi $t0,$zero,19
    divu $a3,$t0
    mfhi $t0
    slti $t0,$t0,6
    // TODO: decide the frequency of the panel
    beq $zero,$t0,gen_end
        addi $t1,$zero,17
        // decide hostile or friendly
        divu $a3,$t1
        mfhi $t1
        addi $t0,$zero,5
        divu $a3,$t0
        mfhi $t0
        slti $t0,$t0,1
        addi $t2,$zero,72
        divu $a3,$t2
        mfhi $t2
        addi $t3,$s5,-320
        sll $t2,$t2,2
        addu $a0,$t3,$t2
        // starting position
        divu $a3,$t2
        mfhi $t2
        slti $t1,$t1,11
        bne $t1,$zero,case_spike
            move $t4,$t0
            //jal DRAW_BROAD($t2,LASTLINE)
            jal broad
            beq $t4,$zero,gen_end
                addi $a0,$a0,-304
                jal heart
            j gen_end
        case_spike:
            jal spike
    gen_end:
    jal random
    addi $sp,$sp,4
    lw $ra,0($sp)
jr $ra
random:
    addi $t1,$zero,16807
    mult $a3,$t1
    mflo $t1
    mfhi $t2
    nor $t3,$t1,$zero
    add $a3,$t1,$t2
    slt $t3,$t2,$t3
    beq $t3,$zero,label_random_1
        addi $a3,$a3,1
    label_random_1:
jr $ra

death:
    addi $sp,$sp,-4
    sw $ra,4($sp)
    move $a0,$s0
    jal erase
    beq $a2,$zero,endgame
    addi $a2,$a2,-1
    jal print_life
recover:
    addi $t0,$zero,1600
    sll $t0,$t0,2
    add $t0,$t0,$s6
    addi $t1,$zero,2400
    sll $t1,$t1,2
    add $t1,$t1,$s6
    loop_recover:
        lw $t2,0($t0)
        addi $t3,$zero,0x1720
        bne $t2,$t3,empty_LZ
            //jal erase
            addi $s0,$t0,-312
            sub $s0,$s0,$s6
            move $a0,$s0
            move $s1,$s0
            jal ball
            j end_recover
        empty_LZ:
        addi $t0,$t0,4
        slt $t2,$t0,$t1
    bne $t2,$zero,loop_recover
        addi $s0,$zero,1720
        sll $s0,$s0,2
        move $a0,$s0
        move $s1,$s0
        jal ball 
    end_recover:
    lw $ra,4($sp)
    addi $sp,$sp,4
j cursor
// TODO: store the position of the bricks on some part of the RAM
print_life:
    addi $t0,$zero,288
    add $t0,$t0,$s6
    addi $t1,$zero,0x076f
    move $t2,$zero
    sll $t4,$a2,2
    loop_life:
        add $t3,$t2,$t0
        sw $t1,0($t3)
        addi $t2,$t2,4
        slt $t5,$t2,$t4
    bne $zero,$t5,loop_life
    addi $t2,$t2,288
    addi $t4,$zero,320
    addi $t1,$zero,0x0720
    loop_l_2:
        add $t3,$s6,$t2
        sw $t1,0($t3)
        addi $t2,$t2,4
        slt $t5,$t2,$t4
    bne $zero,$t5,loop_l_2
jr $ra

hex2dec_2:
//a1 as argument
	move $t5,$ra
	move $t1,$zero
	move $t3,$zero
	addi $t2,$zero,10
	loop_8:
		sll $t1,$t1,4
		div $a0,$t2
		mflo $a0
		mfhi $t0
		add $t1,$t0,$t1
		addi $t3,$t3,1
	bne $a0,$zero,loop_8
	move $t4,$zero
	move $a0,$t1
    move $t1,$t8
	loop_9:
		andi $t9,$a0,0xf
        add $t0,$s6,$t1
        lw $t2,($t0)
        andi $t2,$t2,0x7700
        add $t2,$t9,$t2
        addi $t2,$t2,0x30
        sw $t2,0($t0)
		srl $a0,$a0,4
		addi $t4,$t4,1
        addi $t1,$t1,4
	bne $t4,$t3,loop_9
    addi $t0,$t0,4
    andi $t2,$t2,0x7700
    addi $t2,$t2,0x20
    sw $t2,($t0)
jr $t5
endgame:
    addi $s0,$zero,0x7000
    move $t3,$zero
    loop_repeat:
        addi $t0,$zero,320
        loop_endgame:
            add $t2,$t0,$s6
            lw $t9,0($t2)
            slt $t5,$t9,$s0
            andi $t9,$t9,0xff
            bne $t5,$zero,changed_to_light
                addi $t9,$t9,0x0700
                j merge
            changed_to_light:
                addi $t9,$t9,0x7000
            merge:
            sw $t9,0($t2)
            addi $t0,$t0,4
        bne $t0,$s5,loop_endgame
        move $t8,$zero
        loop_time:
            addi $t8,$t8,1
            add $zero,$zero,$zero
            add $zero,$zero,$zero
            slt $t9,$t8,$s6
        bne $t9,$zero,loop_time
        addi $t3,$t3,1
        slti $t4,$t3,5
    bne $t4,$zero,loop_repeat
    addi $t1,$s6,2228
    addi $t2,$t1,20
    sub $t4,$sp,$s6
    addi $t4,$t4,36
    loop_retry:
        add $t5,$t1,$t4
        lw $t3,($t5)
        sw $t3,0($t1)
        addi $t1,$t1,4
    bne $t1,$t2,loop_retry

afterlife:
    addi $a0,$zero,6480
    addi $v0,$zero,40
    addi $v1,$zero,10
    jal window
    j cursor_menu
j end
window:
    move $s0,$v1
    move $s1,$v0
    move $t0,$zero
    move $s2,$zero
    addi $s3,$zero,2
    loop_outter:
        move $t1,$zero
        loop_inner:
            sll $t2,$t1,2
            add $t2,$t2,$s6
            add $t2,$t2,$a0
            add $t2,$t2,$s2
            beq $t0,$s3,line
                addi $t3,$zero,0x7020
                j window_merge
            line:
                addi $t3,$zero,0x705f    // _ dash
            window_merge:
            sw $t3,($t2)
            addi $t1,$t1,1
        bne $t1,$s1,loop_inner
        addi $t0,$t0,1
        addi $s2,$s2,320
    bne $t0,$s0,loop_outter
    addi $a0,$zero,0x1200
put_strings:
    move $fp,$ra
    //addi $a0,$zero,0x1200
    //addi $a0,$a0,32
    jal put_string
    addi $a0,$a0,8
    jal put_string
    addi $a0,$a0,8
    jal put_string
    addi $a0,$a0,8
    jal put_string
    addi $gp,$zero,1
    jal shade
jr $fp
put_string:
    lw $t0,($a0)
    lw $t1,4($a0)
    add $t0,$t0,$s6
    loop_string:
        lw $t2,($t1)
        beq $t2,$zero,eos
            sw $t2,($t0)
        addi $t1,$t1,4
        addi $t0,$t0,4
    j loop_string
    eos:
jr $ra
shade:
    move $s1,$v0
    addi $t0,$zero,640
    mult $gp,$t0
    mflo $t0
    addi $t0,$t0,6800
    move $t1,$zero
	move $t8,$zero
	addi $t9,$zero,3
	loop_shade_outer:
	addi $t8,$t8,1
    loop_shade:
        sll $t2,$t1,2
        add $t2,$t2,$s6
        add $t2,$t2,$t0
        lw $t3,($t2)
            andi $t4,$t3,0x1000
            bne $t4,$zero,un_shade
                addi $t3,$t3,0x1000
                j merge_shade
            un_shade:
                addi $t3,$t3,-0x1000
        merge_shade:    
        sw $t3,($t2)
        addi $t1,$t1,1
    bne $t1,$s1,loop_shade
	addi $t0,$t0,320
	move $t1,$zero
	bne $t8,$t9,loop_shade_outer
jr $ra
cursor_menu:
    addi $t6,$zero,0xe0		// pressed code
    addi $t7,$zero,0xf0     // ps2 break code
	addi $t0,$zero,0xc
loop_menu:
        lw $t0,0($s7)
        srl $t1,$t0,31
    beq $t1,$zero,loop_menu
    fetched_menu:
        andi $t0,$t0,0xff
        beq $t0,$t6,another_key_menu
        beq $t0,$t7,break_code_menu
        j process_key_menu
        break_code_menu:
            addi $s2,$zero,1
        another_key_menu:
            lw $t0,0($s7)
            srl $t1,$t0,31
            beq $t1,$zero,another_key_menu
            j fetched_menu
    process_key_menu:
        //TODO: boundary 
        move $s5,$gp
        bne $s2,$zero,ignore_menu
            move $a0,$t0
            jal translate_switch_menu
            act_menu:
            bne $s2,$zero,ignore_menu
                jal shade
                move $gp,$s5
                jal shade
ignore_menu:
    move $s2,$zero
    j loop_menu
translate_switch_menu:
    addi $t1,$zero,107 //left
    beq $t1,$a0,left_menu
    addi $t1,$zero,116 //right
    beq $t1,$a0,right_menu
	addi $t1,$zero,90
	beq $t0,$t1,case_enter // { enter }
	addi $t1,$zero,114
	beq $t0,$t1,case_down // { down }
	addi $t1,$zero,117
	beq $t0,$t1,case_up // { up }
    j end_switch_menu
    left_menu:
        beq $at,$zero,end_switch_menu
        sll $t2,$gp,3
        addi $t2,$t2,0x1300
        lw $t4,($t2)
        beq $t4,$zero,ignore_menu
        addi $t4,$t4,-1
        sw $t4,($t2)
        move $a0,$t4
        addi $t8,$zero,8548
        addi $t0,$gp,-2
        beq $t0,$zero,under
            addi $t8,$t8,640
        under:
        jal hex2dec_2
        j ignore_menu
    right_menu:
        beq $at,$zero,end_switch_menu
        sll $t2,$gp,3
        addi $t2,$t2,0x1300
        lw $t4,($t2)
        lw $t0,4($t2)
        beq $t4,$t0,ignore_menu
        addi $t4,$t4,1
        sw $t4,($t2)
        move $a0,$t4
        addi $t8,$zero,8548
        addi $t0,$gp,-2
        beq $t0,$zero,under_2
            addi $t8,$t8,640
        under_2:
        jal hex2dec_2
        j ignore_menu
    case_enter:
        addi $t0,$zero,3
        addi $t1,$zero,2
        bne $at,$zero,skip
            beq $gp,$t1,start
            bne $gp,$t0,end_switch_menu
        skip:
        addi $a0,$zero,0x1200
        beq $at,$zero,settings_menu
            move $at,$zero
            j afterlife 
        settings_menu:
            addi $at,$at,1
            addi $a0,$a0,32
            jal shade
            jal put_strings
            addi $t8,$zero,8548
            addi $t0,$zero,0x1310
            lw $a0,($t0)
            jal hex2dec_2
            addi $t0,$zero,0x1310
            lw $a0,8($t0)
            addi $t8,$zero,9188
            jal hex2dec_2
        j ignore_menu
    case_down:
        slti $t2,$gp,3
        beq $t2,$zero,end_switch_menu
            move $t4,$ra
            //jal shade
            addi $s5,$gp,1
            move $ra,$t4
        j act_menu
    case_up:
        slti $t2,$gp,2
        bne $t2,$zero,end_switch_menu
            move $t4,$ra
            //jal shade
            addi $s5,$gp,-1
            move $ra,$t4
        j act_menu
    end_switch_menu:
    jr $ra
.data 0x00001000
.word 0x706c,0x7069,0x7066,0x7065,0x7073,0x7063,0x706f,0x7072,0x7065,0x7072,0x7065,0x7074,0x7072,0x7079,0x0,0x0  //retry?, 0x1024   703f
.word 0x706f,0x7070,0x7074,0x7069,0x706f,0x706e,0x0 //option, 0x1040
.word 0x7067,0x7061,0x706d,0x7065,0x706f,0x7076,0x7065,0x7072,0x0   //gameover, 0x105c
.word 0x7073,0x7065,0x7074,0x7074,0x7069,0x706e,0x7067,0x7073,0x0   //settings, 0x1080
.word 0x7068,0x7069,0x7067,0x7068,0x7073,0x7063,0x706f,0x7072,0x7065,0x0    //high score, 0x10a4
.word 0x7073,0x7070,0x7065,0x7065,0x7064,0x7020,0x7020,0x7020,0x7020,0x0    //speed, 0x10cc
.word 0x7070,0x7061,0x706e,0x7065,0x706c,0x7064,0x7065,0x706e,0x7073,0x7069,0x7074,0x7079,0x0    //panel density, 0x10f4
.word 0x7068,0x706f,0x7073,0x7070,0x7069,0x7074,0x7061,0x706c,0x7069,0x7074,0x7079,0x0 //hospitality, 0x1128

.data 0x1200
.word 6804,0x105c,7764,0x10a4,8404,0x1024,9044,0x1080,6804,0x1080,7764,0x10cc,8404,0x10f4,9044,0x1128
.data 0x1300
.word 0,0,0,0,6,19,11,17,
// important registers:
// s0,s1 : position of the ball
// s4 : speed of the game
// a4 : current random seed
// a3 : life count
// a2 : score (intended)

// syntax:
// a0: struct_string pos
// each string ends with 0x0

// struct_string syntax:
// offset (position)
// str_addr (relative to str)

// window syntax:
// a0: start_addr
// v0: width
// v1: height